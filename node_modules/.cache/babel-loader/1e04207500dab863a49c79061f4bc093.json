{"ast":null,"code":"import axios from \"axios\"; // 데이터를 불러오는 내용\n// const storage = {\n//   getData() {\n//     const arr = [];\n//     const total = localStorage.length;\n//     if (total > 0) {\n//       for (let i = 0; i < total; i++) {\n//         // 추후 DB 연동 예정\n//         let obj = localStorage.getItem(localStorage.key(i));\n//         arr.push(JSON.parse(obj));\n//       }\n//       // 키값을 이용해서 정렬하기(오름차순)\n//       arr.sort((a, b) => {\n//         if (a.id > b.id) return 1;\n//         if (a.id === b.id) return 0;\n//         if (a.id < b.id) return -1;\n//       });\n//     }\n//     return arr;\n//   }\n// }\n\nconst timeUtil = {\n  // 현재 시간값을 계산해서 중복이 되지 않는 값을 처리한다.\n  // 용도는 key 와 id 를 생성해 주기 위해서 처리\n  // 10보다 작은 값에 0을 붙임\n  addZero(n) {\n    return n < 10 ? \"0\" + n : n;\n  },\n\n  // 현재 시간을 리턴\n  getCurrentDate() {\n    let date = new Date();\n    return date.getFullYear().toString() + this.addZero(date.getMonth() + 1) + this.addZero(date.getDate()) + this.addZero(date.getHours()) + this.addZero(date.getMinutes()) + this.addZero(date.getSeconds());\n  },\n\n  getCurrentTime() {\n    let date = new Date();\n    return date.getFullYear().toString() + \"/\" + this.addZero(date.getMonth() + 1) + \"/\" + this.addZero(date.getDate()) + \"/\" + this.addZero(date.getHours()) + \":\" + this.addZero(date.getMinutes());\n  }\n\n};\nconst state = {\n  headerText: \"My Diary Memo\",\n  memoItemArr: [],\n  iconArr: [\"first.png\", \"second.png\", \"third.png\"]\n};\nconst actions = {\n  fetchReadMemo(context) {\n    axios.get(\"http://kjy3501.dothome.co.kr/page-miniMemo/read.php\").then(response => {\n      console.log(response.data);\n      context.commit(\"READ_MEMO\", response.data.result);\n    }).catch(err => console.log(err));\n  },\n\n  fetchAddMemo(context, obj) {\n    // 서버에 주소로 접근하여서 자료를 push 한다.\n    // push 하고 나서 정상적으로 추가되었다면\n    // 아래의 명령을 실행한다.\n    let addData = {\n      user: timeUtil.getCurrentDate(),\n      title: obj.item,\n      date: timeUtil.getCurrentTime(),\n      icon: state.iconArr[obj.index]\n    };\n    axios.get(`http://kjy3501.dothome.co.kr/page-miniMemo/write.php?user=${addData.user}&title=${addData.title}&date=${addData.date}&icon=${addData.icon}`).then(response => {\n      // console.log(response.data);\n      if (response.data.result == 1) {\n        console.log(\"목록가져오기\");\n        context.commit(\"ADD_MEMO\", addData);\n      } else {\n        console.log(\"서버에러\");\n      }\n    }).catch(err => console.log(err));\n  },\n\n  fetchDeleteMemo({\n    commit\n  }, obj) {\n    // 서버에 주소로 접근해서 데이터를 DELETE.\n    // DELETE 가 성공했다면\n    // 아래를 실행한다.\n    console.log(\"삭제\", obj);\n    axios.get(`http://kjy3501.dothome.co.kr/page-miniMemo/delete.php?id=${obj.id}`).then(response => {\n      console.log(\"서버측 회신\", response.data);\n      commit(\"DELETE_MEMO\", obj);\n    }).catch(err => console.log(err));\n  },\n\n  fetchUpdateMemo({\n    commit\n  }, obj) {\n    // 서버의 주소로 접근해서 FETCH 한다.\n    // 정상적으로 처리되었다면\n    // 아래를 실행한다.\n    let complete = 1;\n\n    if (obj.item.complete == true) {\n      complete = 0;\n    } else {\n      complete = 1;\n    }\n\n    axios.get(`http://kjy3501.dothome.co.kr/page-miniMemo/update.php?id=${obj.item.id}&complete=${complete}`).then(response => {\n      console.log(\"업데이트\", response.data);\n      commit(\"UPDATE_MEMO\", obj);\n    }).catch(err => console.log(err));\n  },\n\n  fetchClearMemo({\n    commit\n  }) {\n    // 서버의 주소로 접근해서 DELETE 한다.\n    // 정상적으로 처리되었다면\n    // 아래를 실행한다.\n    axios.get(\"http://kjy3501.dothome.co.kr/page-miniMemo/delete.php?id=all\").then(response => {\n      console.log(\"전체삭제 \", response.data);\n      commit(\"CLEAR_MEMO\");\n    }).catch(err => console.log(err));\n  }\n\n};\nconst mutations = {\n  READ_MEMO(state, payload) {\n    // 속성중  complete 를 true와 false 로 교체\n    payload.forEach(item => {\n      if (item.complete === \"0\") {\n        item.complete = false;\n      } else {\n        item.complete = true;\n      }\n    });\n    state.memoItemArr = payload;\n  },\n\n  // 아이템 추가 {item, index}\n  ADD_MEMO(state, payload) {\n    // json 저장 문자열\n    ///{completed:false, title:메모내용, icon:파일명 ....}\n    // 아이콘 관련 처리\n    // let memoTemp = {\n    //   id: timeUtil.getCurrentDate(),\n    //   complete: false,\n    //   memotitle: payload.item,\n    //   memodate: timeUtil.getCurrentTime(),\n    //   memoicon: state.iconArr[payload.index]\n    // };\n    // 추후 실제 DB 연동 예정\n    // localStorage.setItem(memoTemp.id, JSON.stringify(memoTemp));\n    // 화면갱신을 위한 배열 요소 추가\n    // state.memoItemArr.push(memoTemp);\n    // axis를 이용해서 추가된 데이터의 정보를\n    // 가지고 와서 목록 1개를 추가한다.\n    axios.get(`http://kjy3501.dothome.co.kr/page-miniMemo/get.php?user=${payload.user}`).then(response => {\n      // console.log('입력완료', response.data.result)\n      const obj = response.data.result[0]; // 무조건 false 아닐까요?\n\n      obj.complete = false;\n      state.memoItemArr.push(obj);\n    }).catch(err => console.log(err));\n  },\n\n  // 아이템 삭제 {item, index}\n  DELETE_MEMO(state, payload) {\n    // localStrage 에서 key를 통해서 지운다.\n    // localStorage.removeItem(payload.item);\n    // 배열(memoItemArr) 에서도 지운다.\n    state.memoItemArr.splice(payload.index, 1); // 키값을 이용해서 정렬하기(오름차순)\n    // state.memoItemArr.sort((a, b) => {\n    //   if (a.id > b.id) return 1;\n    //   if (a.id === b.id) return 0;\n    //   if (a.id < b.id) return -1;\n    // });\n  },\n\n  // 아이템 변경 {item, index}\n  UPDATE_MEMO(state, payload) {\n    // localStorage 에서는 update 메소드를 지원하지 않습니다.\n    // 찾아서 지우고,\n    // localStorage.removeItem(payload.item.id);\n    // 변경한다.\n    // item.complete = !item.complete;\n    state.memoItemArr[payload.index].complete = !state.memoItemArr[payload.index].complete; // 다시 set 한다.\n    // localStorage.setItem(payload.item.id, JSON.stringify(payload.item));\n    // 키값을 이용해서 정렬하기(오름차순)\n    // state.memoItemArr.sort((a, b) => {\n    //   if (a.id > b.id) return 1;\n    //   if (a.id === b.id) return 0;\n    //   if (a.id < b.id) return -1;\n    // });\n  },\n\n  // 전체 아이템 삭제\n  CLEAR_MEMO(state) {\n    // localStorage 에서 내용 전체 삭제\n    // 추후 DB 연동 예정\n    // localStorage.clear();\n    state.memoItemArr.splice(0);\n  }\n\n};\nconst getters = {\n  getMemoArr(state) {\n    // 조건에 따라서 다른 결과물을 돌려준다.\n    return state.memoItemArr;\n  }\n\n};\nexport default {\n  state,\n  actions,\n  mutations,\n  getters\n};","map":{"version":3,"names":["axios","timeUtil","addZero","n","getCurrentDate","date","Date","getFullYear","toString","getMonth","getDate","getHours","getMinutes","getSeconds","getCurrentTime","state","headerText","memoItemArr","iconArr","actions","fetchReadMemo","context","get","then","response","console","log","data","commit","result","catch","err","fetchAddMemo","obj","addData","user","title","item","icon","index","fetchDeleteMemo","id","fetchUpdateMemo","complete","fetchClearMemo","mutations","READ_MEMO","payload","forEach","ADD_MEMO","push","DELETE_MEMO","splice","UPDATE_MEMO","CLEAR_MEMO","getters","getMemoArr"],"sources":["C:/Users/user/Desktop/정용/miniblog/src/store/modules/memoStore.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// 데이터를 불러오는 내용\r\n// const storage = {\r\n//   getData() {\r\n//     const arr = [];\r\n//     const total = localStorage.length;\r\n//     if (total > 0) {\r\n//       for (let i = 0; i < total; i++) {\r\n//         // 추후 DB 연동 예정\r\n//         let obj = localStorage.getItem(localStorage.key(i));\r\n//         arr.push(JSON.parse(obj));\r\n//       }\r\n//       // 키값을 이용해서 정렬하기(오름차순)\r\n//       arr.sort((a, b) => {\r\n//         if (a.id > b.id) return 1;\r\n//         if (a.id === b.id) return 0;\r\n//         if (a.id < b.id) return -1;\r\n//       });\r\n//     }\r\n\r\n//     return arr;\r\n//   }\r\n// }\r\n\r\nconst timeUtil = {\r\n  // 현재 시간값을 계산해서 중복이 되지 않는 값을 처리한다.\r\n  // 용도는 key 와 id 를 생성해 주기 위해서 처리\r\n  // 10보다 작은 값에 0을 붙임\r\n  addZero(n) {\r\n    return n < 10 ? \"0\" + n : n;\r\n  },\r\n  // 현재 시간을 리턴\r\n  getCurrentDate() {\r\n    let date = new Date();\r\n    return (\r\n      date.getFullYear().toString() +\r\n      this.addZero(date.getMonth() + 1) +\r\n      this.addZero(date.getDate()) +\r\n      this.addZero(date.getHours()) +\r\n      this.addZero(date.getMinutes()) +\r\n      this.addZero(date.getSeconds())\r\n    );\r\n  },\r\n  getCurrentTime() {\r\n    let date = new Date();\r\n    return (\r\n      date.getFullYear().toString() +\r\n      \"/\" +\r\n      this.addZero(date.getMonth() + 1) +\r\n      \"/\" +\r\n      this.addZero(date.getDate()) +\r\n      \"/\" +\r\n      this.addZero(date.getHours()) +\r\n      \":\" +\r\n      this.addZero(date.getMinutes())\r\n    );\r\n  },\r\n};\r\n\r\nconst state = {\r\n  headerText: \"My Diary Memo\",\r\n  memoItemArr: [],\r\n  iconArr: [\"first.png\", \"second.png\", \"third.png\"],\r\n};\r\n\r\nconst actions = {\r\n  fetchReadMemo(context) {\r\n    axios\r\n      .get(\"http://kjy3501.dothome.co.kr/page-miniMemo/read.php\")\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        context.commit(\"READ_MEMO\", response.data.result);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  },\r\n  fetchAddMemo(context, obj) {\r\n    // 서버에 주소로 접근하여서 자료를 push 한다.\r\n    // push 하고 나서 정상적으로 추가되었다면\r\n    // 아래의 명령을 실행한다.\r\n    let addData = {\r\n      user: timeUtil.getCurrentDate(),\r\n      title: obj.item,\r\n      date: timeUtil.getCurrentTime(),\r\n      icon: state.iconArr[obj.index],\r\n    };\r\n\r\n    axios\r\n      .get(\r\n        `http://kjy3501.dothome.co.kr/page-miniMemo/write.php?user=${addData.user}&title=${addData.title}&date=${addData.date}&icon=${addData.icon}`\r\n      )\r\n      .then((response) => {\r\n        // console.log(response.data);\r\n        if (response.data.result == 1) {\r\n          console.log(\"목록가져오기\");\r\n          context.commit(\"ADD_MEMO\", addData);\r\n        } else {\r\n          console.log(\"서버에러\");\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  },\r\n  fetchDeleteMemo({ commit }, obj) {\r\n    // 서버에 주소로 접근해서 데이터를 DELETE.\r\n    // DELETE 가 성공했다면\r\n    // 아래를 실행한다.\r\n\r\n    console.log(\"삭제\", obj);\r\n\r\n    axios\r\n      .get(`http://kjy3501.dothome.co.kr/page-miniMemo/delete.php?id=${obj.id}`)\r\n      .then((response) => {\r\n        console.log(\"서버측 회신\", response.data);\r\n        commit(\"DELETE_MEMO\", obj);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  },\r\n  fetchUpdateMemo({ commit }, obj) {\r\n    // 서버의 주소로 접근해서 FETCH 한다.\r\n    // 정상적으로 처리되었다면\r\n    // 아래를 실행한다.\r\n    let complete = 1;\r\n    if (obj.item.complete == true) {\r\n      complete = 0;\r\n    } else {\r\n      complete = 1;\r\n    }\r\n    axios\r\n      .get(\r\n        `http://kjy3501.dothome.co.kr/page-miniMemo/update.php?id=${obj.item.id}&complete=${complete}`\r\n      )\r\n      .then((response) => {\r\n        console.log(\"업데이트\", response.data);\r\n        commit(\"UPDATE_MEMO\", obj);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  },\r\n\r\n  fetchClearMemo({ commit }) {\r\n    // 서버의 주소로 접근해서 DELETE 한다.\r\n    // 정상적으로 처리되었다면\r\n    // 아래를 실행한다.\r\n    axios\r\n      .get(\"http://kjy3501.dothome.co.kr/page-miniMemo/delete.php?id=all\")\r\n      .then((response) => {\r\n        console.log(\"전체삭제 \", response.data);\r\n        commit(\"CLEAR_MEMO\");\r\n      })\r\n      .catch((err) => console.log(err));\r\n  },\r\n};\r\nconst mutations = {\r\n  READ_MEMO(state, payload) {\r\n    // 속성중  complete 를 true와 false 로 교체\r\n    payload.forEach((item) => {\r\n      if (item.complete === \"0\") {\r\n        item.complete = false;\r\n      } else {\r\n        item.complete = true;\r\n      }\r\n    });\r\n\r\n    state.memoItemArr = payload;\r\n  },\r\n  // 아이템 추가 {item, index}\r\n  ADD_MEMO(state, payload) {\r\n    // json 저장 문자열\r\n    ///{completed:false, title:메모내용, icon:파일명 ....}\r\n    // 아이콘 관련 처리\r\n    // let memoTemp = {\r\n    //   id: timeUtil.getCurrentDate(),\r\n    //   complete: false,\r\n    //   memotitle: payload.item,\r\n    //   memodate: timeUtil.getCurrentTime(),\r\n    //   memoicon: state.iconArr[payload.index]\r\n    // };\r\n    // 추후 실제 DB 연동 예정\r\n    // localStorage.setItem(memoTemp.id, JSON.stringify(memoTemp));\r\n    // 화면갱신을 위한 배열 요소 추가\r\n    // state.memoItemArr.push(memoTemp);\r\n\r\n    // axis를 이용해서 추가된 데이터의 정보를\r\n    // 가지고 와서 목록 1개를 추가한다.\r\n    axios\r\n      .get(\r\n        `http://kjy3501.dothome.co.kr/page-miniMemo/get.php?user=${payload.user}`\r\n      )\r\n      .then((response) => {\r\n        // console.log('입력완료', response.data.result)\r\n        const obj = response.data.result[0];\r\n        // 무조건 false 아닐까요?\r\n        obj.complete = false;\r\n        state.memoItemArr.push(obj);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  },\r\n  // 아이템 삭제 {item, index}\r\n  DELETE_MEMO(state, payload) {\r\n    // localStrage 에서 key를 통해서 지운다.\r\n    // localStorage.removeItem(payload.item);\r\n    // 배열(memoItemArr) 에서도 지운다.\r\n    state.memoItemArr.splice(payload.index, 1);\r\n\r\n    // 키값을 이용해서 정렬하기(오름차순)\r\n    // state.memoItemArr.sort((a, b) => {\r\n    //   if (a.id > b.id) return 1;\r\n    //   if (a.id === b.id) return 0;\r\n    //   if (a.id < b.id) return -1;\r\n    // });\r\n  },\r\n  // 아이템 변경 {item, index}\r\n  UPDATE_MEMO(state, payload) {\r\n    // localStorage 에서는 update 메소드를 지원하지 않습니다.\r\n    // 찾아서 지우고,\r\n    // localStorage.removeItem(payload.item.id);\r\n    // 변경한다.\r\n    // item.complete = !item.complete;\r\n    state.memoItemArr[payload.index].complete =\r\n      !state.memoItemArr[payload.index].complete;\r\n    // 다시 set 한다.\r\n    // localStorage.setItem(payload.item.id, JSON.stringify(payload.item));\r\n\r\n    // 키값을 이용해서 정렬하기(오름차순)\r\n    // state.memoItemArr.sort((a, b) => {\r\n    //   if (a.id > b.id) return 1;\r\n    //   if (a.id === b.id) return 0;\r\n    //   if (a.id < b.id) return -1;\r\n    // });\r\n  },\r\n  // 전체 아이템 삭제\r\n  CLEAR_MEMO(state) {\r\n    // localStorage 에서 내용 전체 삭제\r\n    // 추후 DB 연동 예정\r\n    // localStorage.clear();\r\n    state.memoItemArr.splice(0);\r\n  },\r\n};\r\nconst getters = {\r\n  getMemoArr(state) {\r\n    // 조건에 따라서 다른 결과물을 돌려준다.\r\n    return state.memoItemArr;\r\n  },\r\n};\r\n\r\nexport default { state, actions, mutations, getters };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}