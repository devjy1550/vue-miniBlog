{"ast":null,"code":"import axios from \"axios\"; // 데이터를 불러오는 내용\n\nconst storage = {\n  getData() {\n    const arr = [];\n    const total = localStorage.length;\n\n    if (total > 0) {\n      for (let i = 0; i < total; i++) {\n        // 추후 DB 연동 예정\n        let obj = localStorage.getItem(localStorage.key(i));\n        arr.push(JSON.parse(obj));\n      } // 키값을 이용해서 정렬하기(오름차순)\n\n\n      arr.sort((a, b) => {\n        if (a.id > b.id) return 1;\n        if (a.id === b.id) return 0;\n        if (a.id < b.id) return -1;\n      });\n    }\n\n    return arr;\n  }\n\n};\nconst timeUtil = {\n  // 현재 시간값을 계산해서 중복이 되지 않는 값을 처리한다.\n  // 용도는 key 와 id 를 생성해 주기 위해서 처리      \n  // 10보다 작은 값에 0을 붙임\n  addZero(n) {\n    return n < 10 ? '0' + n : n;\n  },\n\n  // 현재 시간을 리턴\n  getCurrentDate() {\n    let date = new Date();\n    return date.getFullYear().toString() + this.addZero(date.getMonth() + 1) + this.addZero(date.getDate()) + this.addZero(date.getHours()) + this.addZero(date.getMinutes()) + this.addZero(date.getSeconds());\n  },\n\n  getCurrentTime() {\n    let date = new Date();\n    return date.getFullYear().toString() + '/' + this.addZero(date.getMonth() + 1) + '/' + this.addZero(date.getDate()) + '/' + this.addZero(date.getHours()) + ':' + this.addZero(date.getMinutes());\n  }\n\n};\nconst state = {\n  headerText: 'My Diary Memo',\n  memoItemArr: storage.getData(),\n  iconArr: ['dog1.png', 'dog2.png', 'str.png']\n};\nconst actions = {\n  fetchGetMemo(context) {\n    axios.get('http://webd2020.dothome.co.kr/page-miniblog/read.php').then(response => {\n      console.log(response.data);\n      context.commit(\"GET_MEMO\", response.data.result);\n    }).catch(err => console.log(err));\n  },\n\n  fetchAddMemo(context, obj) {\n    // 서버에 주소로 접근하여서 자료를 push 한다.\n    // push 하고 나서 정상적으로 추가되었다면\n    // 아래의 명령을 실행한다.    \n    context.commit(\"ADD_MEMO\", obj);\n  },\n\n  fetchDeleteMemo({\n    commit\n  }, obj) {\n    // 서버에 주소로 접근해서 데이터를 DELETE.\n    // DELETE 가 성공했다면\n    // 아래를 실행한다.\n    commit(\"DELETE_MEMO\", obj);\n  },\n\n  fetchUpdateMemo({\n    commit\n  }, obj) {\n    // 서버의 주소로 접근해서 FETCH 한다.\n    // 정상적으로 처리되었다면\n    // 아래를 실행한다.\n    commit(\"UPDATE_MEMO\", obj);\n  },\n\n  fetchClearMemo({\n    commit\n  }) {\n    // 서버의 주소로 접근해서 DELETE 한다.\n    // 정상적으로 처리되었다면\n    // 아래를 실행한다.\n    commit(\"CLEAR_MEMO\");\n  }\n\n};\nconst mutations = {\n  GET_MEMO(state, payload) {\n    console.log('GET', payload);\n    state.memoItemArr = payload;\n    console.log(state.memoItemArr);\n  },\n\n  // 아이템 추가 {item, index}\n  ADD_MEMO(state, payload) {\n    // json 저장 문자열\n    ///{completed:false, title:메모내용, icon:파일명 ....}\n    // 아이콘 관련 처리\n    let memoTemp = {\n      id: timeUtil.getCurrentDate(),\n      complete: false,\n      memotitle: payload.item,\n      memodate: timeUtil.getCurrentTime(),\n      memoicon: state.iconArr[payload.index]\n    }; // 추후 실제 DB 연동 예정\n\n    localStorage.setItem(memoTemp.id, JSON.stringify(memoTemp)); // 화면갱신을 위한 배열 요소 추가\n\n    state.memoItemArr.push(memoTemp);\n  },\n\n  // 아이템 삭제 {item, index}\n  DELETE_MEMO(state, payload) {\n    // localStrage 에서 key를 통해서 지운다.\n    localStorage.removeItem(payload.item); // 배열(memoItemArr) 에서도 지운다.\n\n    state.memoItemArr.splice(payload.index, 1); // 키값을 이용해서 정렬하기(오름차순)\n\n    state.memoItemArr.sort((a, b) => {\n      if (a.id > b.id) return 1;\n      if (a.id === b.id) return 0;\n      if (a.id < b.id) return -1;\n    });\n  },\n\n  // 아이템 변경 {item, index}\n  UPDATE_MEMO(state, payload) {\n    // localStorage 에서는 update 메소드를 지원하지 않습니다.\n    // 찾아서 지우고, \n    localStorage.removeItem(payload.item.id); // 변경한다.\n    // item.complete = !item.complete;\n\n    state.memoItemArr[payload.index].complete = !state.memoItemArr[payload.index].complete; // 다시 set 한다.\n\n    localStorage.setItem(payload.item.id, JSON.stringify(payload.item)); // 키값을 이용해서 정렬하기(오름차순)\n\n    state.memoItemArr.sort((a, b) => {\n      if (a.id > b.id) return 1;\n      if (a.id === b.id) return 0;\n      if (a.id < b.id) return -1;\n    });\n  },\n\n  // 전체 아이템 삭제\n  CLEAR_MEMO(state) {\n    // localStorage 에서 내용 전체 삭제\n    // 추후 DB 연동 예정\n    localStorage.clear();\n    state.memoItemArr.splice(0);\n  }\n\n};\nconst getters = {\n  getMemoArr(state) {\n    console.log('getters', state.memoItemArr); // 조건에 따라서 다른 결과물을 돌려준다.\n\n    return state.memoItemArr;\n  }\n\n};\nexport default {\n  state,\n  actions,\n  mutations,\n  getters\n};","map":{"version":3,"names":["axios","storage","getData","arr","total","localStorage","length","i","obj","getItem","key","push","JSON","parse","sort","a","b","id","timeUtil","addZero","n","getCurrentDate","date","Date","getFullYear","toString","getMonth","getDate","getHours","getMinutes","getSeconds","getCurrentTime","state","headerText","memoItemArr","iconArr","actions","fetchGetMemo","context","get","then","response","console","log","data","commit","result","catch","err","fetchAddMemo","fetchDeleteMemo","fetchUpdateMemo","fetchClearMemo","mutations","GET_MEMO","payload","ADD_MEMO","memoTemp","complete","memotitle","item","memodate","memoicon","index","setItem","stringify","DELETE_MEMO","removeItem","splice","UPDATE_MEMO","CLEAR_MEMO","clear","getters","getMemoArr"],"sources":["C:/Users/user/Desktop/miniblog/src/store/modules/memoStore.js"],"sourcesContent":["import axios  from \"axios\";\r\n\r\n// 데이터를 불러오는 내용\r\nconst storage = {\r\n  getData() {\r\n    const arr = [];\r\n    const total = localStorage.length;\r\n    if (total > 0) {\r\n      for (let i = 0; i < total; i++) {\r\n        // 추후 DB 연동 예정\r\n        let obj = localStorage.getItem(localStorage.key(i));\r\n        arr.push(JSON.parse(obj));\r\n      }\r\n      // 키값을 이용해서 정렬하기(오름차순)\r\n      arr.sort((a, b) => {\r\n        if (a.id > b.id) return 1;\r\n        if (a.id === b.id) return 0;\r\n        if (a.id < b.id) return -1;\r\n      });\r\n    }\r\n\r\n    return arr;\r\n  }\r\n}\r\n\r\nconst timeUtil = {\r\n  // 현재 시간값을 계산해서 중복이 되지 않는 값을 처리한다.\r\n  // 용도는 key 와 id 를 생성해 주기 위해서 처리      \r\n  // 10보다 작은 값에 0을 붙임\r\n  addZero(n) {\r\n    return n < 10 ? '0' + n : n;\r\n  },\r\n  // 현재 시간을 리턴\r\n  getCurrentDate() {\r\n    let date = new Date();\r\n    return date.getFullYear().toString() + this.addZero(date.getMonth() + 1) + this.addZero(date.getDate()) +\r\n      this.addZero(date.getHours()) + this.addZero(date.getMinutes()) + this.addZero(date.getSeconds());\r\n  },\r\n  getCurrentTime() {\r\n    let date = new Date();\r\n    return date.getFullYear().toString() + '/' + this.addZero(date.getMonth() + 1) + '/' + this.addZero(date.getDate()) + '/' +\r\n      this.addZero(date.getHours()) + ':' + this.addZero(date.getMinutes());\r\n  }\r\n}\r\n\r\nconst state = {\r\n  headerText: 'My Diary Memo',\r\n  memoItemArr: storage.getData(),\r\n  iconArr: ['dog1.png', 'dog2.png', 'str.png']\r\n};\r\n\r\nconst actions = {\r\n  fetchGetMemo(context){\r\n    axios.get('http://webd2020.dothome.co.kr/page-miniblog/read.php')\r\n    .then(response => {\r\n      console.log(response.data)\r\n      context.commit(\"GET_MEMO\", response.data.result);\r\n    })\r\n    .catch(err => console.log(err));\r\n  },\r\n  fetchAddMemo(context, obj) {\r\n    // 서버에 주소로 접근하여서 자료를 push 한다.\r\n    // push 하고 나서 정상적으로 추가되었다면\r\n    // 아래의 명령을 실행한다.    \r\n    context.commit(\"ADD_MEMO\", obj);\r\n  },\r\n  fetchDeleteMemo({\r\n    commit\r\n  }, obj) {\r\n    // 서버에 주소로 접근해서 데이터를 DELETE.\r\n    // DELETE 가 성공했다면\r\n    // 아래를 실행한다.\r\n    commit(\"DELETE_MEMO\", obj);\r\n  },\r\n  fetchUpdateMemo({\r\n    commit\r\n  }, obj) {\r\n    // 서버의 주소로 접근해서 FETCH 한다.\r\n    // 정상적으로 처리되었다면\r\n    // 아래를 실행한다.\r\n    commit(\"UPDATE_MEMO\", obj);\r\n  },\r\n  fetchClearMemo({\r\n    commit\r\n  }) {\r\n    // 서버의 주소로 접근해서 DELETE 한다.\r\n    // 정상적으로 처리되었다면\r\n    // 아래를 실행한다.\r\n    commit(\"CLEAR_MEMO\");\r\n  },\r\n}\r\nconst mutations = {\r\n  GET_MEMO(state, payload) {\r\n    console.log('GET', payload)\r\n    state.memoItemArr = payload;\r\n    console.log(state.memoItemArr)\r\n  },\r\n  // 아이템 추가 {item, index}\r\n  ADD_MEMO(state, payload) {\r\n    // json 저장 문자열\r\n    ///{completed:false, title:메모내용, icon:파일명 ....}\r\n    // 아이콘 관련 처리\r\n    let memoTemp = {\r\n      id: timeUtil.getCurrentDate(),\r\n      complete: false,\r\n      memotitle: payload.item,\r\n      memodate: timeUtil.getCurrentTime(),\r\n      memoicon: state.iconArr[payload.index]\r\n    };\r\n    // 추후 실제 DB 연동 예정\r\n    localStorage.setItem(memoTemp.id, JSON.stringify(memoTemp));\r\n    // 화면갱신을 위한 배열 요소 추가\r\n    state.memoItemArr.push(memoTemp);\r\n  },\r\n  // 아이템 삭제 {item, index}\r\n  DELETE_MEMO(state, payload) {\r\n    // localStrage 에서 key를 통해서 지운다.\r\n    localStorage.removeItem(payload.item);\r\n    // 배열(memoItemArr) 에서도 지운다.\r\n    state.memoItemArr.splice(payload.index, 1);\r\n\r\n    // 키값을 이용해서 정렬하기(오름차순)\r\n    state.memoItemArr.sort((a, b) => {\r\n      if (a.id > b.id) return 1;\r\n      if (a.id === b.id) return 0;\r\n      if (a.id < b.id) return -1;\r\n    });\r\n  },\r\n  // 아이템 변경 {item, index}\r\n  UPDATE_MEMO(state, payload) {\r\n\r\n    // localStorage 에서는 update 메소드를 지원하지 않습니다.\r\n    // 찾아서 지우고, \r\n    localStorage.removeItem(payload.item.id);\r\n    // 변경한다.\r\n    // item.complete = !item.complete;\r\n    state.memoItemArr[payload.index].complete = !state.memoItemArr[payload.index].complete;\r\n    // 다시 set 한다.\r\n    localStorage.setItem(payload.item.id, JSON.stringify(payload.item));\r\n\r\n    // 키값을 이용해서 정렬하기(오름차순)\r\n    state.memoItemArr.sort((a, b) => {\r\n      if (a.id > b.id) return 1;\r\n      if (a.id === b.id) return 0;\r\n      if (a.id < b.id) return -1;\r\n    });\r\n\r\n  },\r\n  // 전체 아이템 삭제\r\n  CLEAR_MEMO(state) {\r\n    // localStorage 에서 내용 전체 삭제\r\n    // 추후 DB 연동 예정\r\n    localStorage.clear();\r\n    state.memoItemArr.splice(0);\r\n  }\r\n};\r\nconst getters = {\r\n  getMemoArr(state) {\r\n    console.log('getters', state.memoItemArr)\r\n    // 조건에 따라서 다른 결과물을 돌려준다.\r\n    return state.memoItemArr;\r\n  }\r\n};\r\n\r\nexport default { state, actions, mutations, getters}"],"mappings":"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"},"metadata":{},"sourceType":"module"}